//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;

namespace AssemblyCSharp
{
	public class PipeSequenceGenerator
	{
		public IList<Pipe> sequence { get; private set; }
		private Random random;

		public PipeSequenceGenerator ()
		{
			sequence = new List<Pipe> ();
			random = RandomSingleton.getInstance().random;
		}

		public PipeSequenceGenerator addNewPipe() {
			Pipe pipe;
			do {
				pipe = GenerateRandomPipe();
			} while (!IsAcceptable(pipe));
			sequence.Add(pipe);
			return this;
		}
		
		private Pipe GenerateRandomPipe() {
			var availablePipes = Enum.GetValues(typeof(Pipe)).Cast<Pipe>();
			return availablePipes.ElementAt (random.Next (availablePipes.Count ()));
		}
		
		private bool IsAcceptable(Pipe pipe) {
			return (sequence.Count < 2 || !(sequence.Reverse().Take(2).All(p => p == pipe)));
		}
		public PipeSequenceGenerator reset()
        {
			sequence = new List<Pipe>();
            return this;
        }

		public Pipe getLastColor()
        {
            return sequence[sequence.Count - 1];
        }
	}
}

